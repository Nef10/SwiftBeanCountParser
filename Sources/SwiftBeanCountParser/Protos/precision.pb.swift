// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: beancount/ccore/precision.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// -*- mode: protobuf -*-
//
// A schema for precision statistics and the display context.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Summarized precision statistics data.
/// This can be used to format numbers.
struct Beancount_Precision_PrecisionStats {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pairs: [Beancount_Precision_Pair] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Stats over a specific currency pair.
struct Beancount_Precision_Pair {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var quote: String {
    get {return _quote ?? String()}
    set {_quote = newValue}
  }
  /// Returns true if `quote` has been explicitly set.
  var hasQuote: Bool {return self._quote != nil}
  /// Clears the value of `quote`. Subsequent reads from it will return its default value.
  mutating func clearQuote() {self._quote = nil}

  var base: String {
    get {return _base ?? String()}
    set {_base = newValue}
  }
  /// Returns true if `base` has been explicitly set.
  var hasBase: Bool {return self._base != nil}
  /// Clears the value of `base`. Subsequent reads from it will return its default value.
  mutating func clearBase() {self._base = nil}

  var hasSign_p: Bool {
    get {return _hasSign_p ?? false}
    set {_hasSign_p = newValue}
  }
  /// Returns true if `hasSign_p` has been explicitly set.
  var hasHasSign_p: Bool {return self._hasSign_p != nil}
  /// Clears the value of `hasSign_p`. Subsequent reads from it will return its default value.
  mutating func clearHasSign_p() {self._hasSign_p = nil}

  var maxIntegerDigits: Int32 {
    get {return _maxIntegerDigits ?? 0}
    set {_maxIntegerDigits = newValue}
  }
  /// Returns true if `maxIntegerDigits` has been explicitly set.
  var hasMaxIntegerDigits: Bool {return self._maxIntegerDigits != nil}
  /// Clears the value of `maxIntegerDigits`. Subsequent reads from it will return its default value.
  mutating func clearMaxIntegerDigits() {self._maxIntegerDigits = nil}

  var exponentMode: Int32 {
    get {return _exponentMode ?? 0}
    set {_exponentMode = newValue}
  }
  /// Returns true if `exponentMode` has been explicitly set.
  var hasExponentMode: Bool {return self._exponentMode != nil}
  /// Clears the value of `exponentMode`. Subsequent reads from it will return its default value.
  mutating func clearExponentMode() {self._exponentMode = nil}

  var exponentMax: Int32 {
    get {return _exponentMax ?? 0}
    set {_exponentMax = newValue}
  }
  /// Returns true if `exponentMax` has been explicitly set.
  var hasExponentMax: Bool {return self._exponentMax != nil}
  /// Clears the value of `exponentMax`. Subsequent reads from it will return its default value.
  mutating func clearExponentMax() {self._exponentMax = nil}

  var exponents: Dictionary<Int32,Int32> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _quote: String? = nil
  fileprivate var _base: String? = nil
  fileprivate var _hasSign_p: Bool? = nil
  fileprivate var _maxIntegerDigits: Int32? = nil
  fileprivate var _exponentMode: Int32? = nil
  fileprivate var _exponentMax: Int32? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Beancount_Precision_PrecisionStats: @unchecked Sendable {}
extension Beancount_Precision_Pair: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "beancount.precision"

extension Beancount_Precision_PrecisionStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PrecisionStats"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pairs"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.pairs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pairs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pairs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Beancount_Precision_PrecisionStats, rhs: Beancount_Precision_PrecisionStats) -> Bool {
    if lhs.pairs != rhs.pairs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Beancount_Precision_Pair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Pair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "quote"),
    2: .same(proto: "base"),
    3: .standard(proto: "has_sign"),
    4: .standard(proto: "max_integer_digits"),
    5: .standard(proto: "exponent_mode"),
    6: .standard(proto: "exponent_max"),
    7: .same(proto: "exponents"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._quote) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._base) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._hasSign_p) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._maxIntegerDigits) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._exponentMode) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._exponentMax) }()
      case 7: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: &self.exponents) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._quote {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._base {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._hasSign_p {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._maxIntegerDigits {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._exponentMode {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._exponentMax {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    if !self.exponents.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufInt32,SwiftProtobuf.ProtobufInt32>.self, value: self.exponents, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Beancount_Precision_Pair, rhs: Beancount_Precision_Pair) -> Bool {
    if lhs._quote != rhs._quote {return false}
    if lhs._base != rhs._base {return false}
    if lhs._hasSign_p != rhs._hasSign_p {return false}
    if lhs._maxIntegerDigits != rhs._maxIntegerDigits {return false}
    if lhs._exponentMode != rhs._exponentMode {return false}
    if lhs._exponentMax != rhs._exponentMax {return false}
    if lhs.exponents != rhs.exponents {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
