// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: beancount/ccore/number.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Proto serialization for decimal numbers.
// This is based on representing numbers from mpdecimal (IEEE 754).

/// TODO(blais): Change this to proto3 when it becomes possible to either (a)
/// enable --experimental_allow_proto3_optional by providing flags to the native
/// proto_library() rule (currently not possible AFAICT), or (b) it is supported
/// directly, and metadata can be used to enable it. In the meantime we use
/// proto2, because I really do want optionals with a presence field.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Variant for number representation.
struct Beancount_Number {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Exact string for the number, explicit and readable, requires conversion.
  var exact: String {
    get {return _exact ?? String()}
    set {_exact = newValue}
  }
  /// Returns true if `exact` has been explicitly set.
  var hasExact: Bool {return self._exact != nil}
  /// Clears the value of `exact`. Subsequent reads from it will return its default value.
  mutating func clearExact() {self._exact = nil}

  /// Representation as `mpd_t`.
  var mpd: Beancount_Mpd {
    get {return _mpd ?? Beancount_Mpd()}
    set {_mpd = newValue}
  }
  /// Returns true if `mpd` has been explicitly set.
  var hasMpd: Bool {return self._mpd != nil}
  /// Clears the value of `mpd`. Subsequent reads from it will return its default value.
  mutating func clearMpd() {self._mpd = nil}

  /// Representation as `mpd_uint128_triple_t`.
  var triple: Beancount_MpdTriple {
    get {return _triple ?? Beancount_MpdTriple()}
    set {_triple = newValue}
  }
  /// Returns true if `triple` has been explicitly set.
  var hasTriple: Bool {return self._triple != nil}
  /// Clears the value of `triple`. Subsequent reads from it will return its default value.
  mutating func clearTriple() {self._triple = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _exact: String? = nil
  fileprivate var _mpd: Beancount_Mpd? = nil
  fileprivate var _triple: Beancount_MpdTriple? = nil
}

/// Representation of mpdecimal's `mpd_t` with serialized data block.
struct Beancount_Mpd {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var flags: Int32 {
    get {return _flags ?? 0}
    set {_flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  var hasFlags: Bool {return self._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  mutating func clearFlags() {self._flags = nil}

  var exp: Int32 {
    get {return _exp ?? 0}
    set {_exp = newValue}
  }
  /// Returns true if `exp` has been explicitly set.
  var hasExp: Bool {return self._exp != nil}
  /// Clears the value of `exp`. Subsequent reads from it will return its default value.
  mutating func clearExp() {self._exp = nil}

  var digits: Int32 {
    get {return _digits ?? 0}
    set {_digits = newValue}
  }
  /// Returns true if `digits` has been explicitly set.
  var hasDigits: Bool {return self._digits != nil}
  /// Clears the value of `digits`. Subsequent reads from it will return its default value.
  mutating func clearDigits() {self._digits = nil}

  var len: Int32 {
    get {return _len ?? 0}
    set {_len = newValue}
  }
  /// Returns true if `len` has been explicitly set.
  var hasLen: Bool {return self._len != nil}
  /// Clears the value of `len`. Subsequent reads from it will return its default value.
  mutating func clearLen() {self._len = nil}

  var data: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _flags: Int32? = nil
  fileprivate var _exp: Int32? = nil
  fileprivate var _digits: Int32? = nil
  fileprivate var _len: Int32? = nil
}

/// Representation of mpdecimal's `mpd_uint128_triple_t`.
struct Beancount_MpdTriple {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tag: UInt32 {
    get {return _tag ?? 0}
    set {_tag = newValue}
  }
  /// Returns true if `tag` has been explicitly set.
  var hasTag: Bool {return self._tag != nil}
  /// Clears the value of `tag`. Subsequent reads from it will return its default value.
  mutating func clearTag() {self._tag = nil}

  var sign: UInt32 {
    get {return _sign ?? 0}
    set {_sign = newValue}
  }
  /// Returns true if `sign` has been explicitly set.
  var hasSign: Bool {return self._sign != nil}
  /// Clears the value of `sign`. Subsequent reads from it will return its default value.
  mutating func clearSign() {self._sign = nil}

  var hi: UInt64 {
    get {return _hi ?? 0}
    set {_hi = newValue}
  }
  /// Returns true if `hi` has been explicitly set.
  var hasHi: Bool {return self._hi != nil}
  /// Clears the value of `hi`. Subsequent reads from it will return its default value.
  mutating func clearHi() {self._hi = nil}

  var lo: UInt64 {
    get {return _lo ?? 0}
    set {_lo = newValue}
  }
  /// Returns true if `lo` has been explicitly set.
  var hasLo: Bool {return self._lo != nil}
  /// Clears the value of `lo`. Subsequent reads from it will return its default value.
  mutating func clearLo() {self._lo = nil}

  var exp: Int64 {
    get {return _exp ?? 0}
    set {_exp = newValue}
  }
  /// Returns true if `exp` has been explicitly set.
  var hasExp: Bool {return self._exp != nil}
  /// Clears the value of `exp`. Subsequent reads from it will return its default value.
  mutating func clearExp() {self._exp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tag: UInt32? = nil
  fileprivate var _sign: UInt32? = nil
  fileprivate var _hi: UInt64? = nil
  fileprivate var _lo: UInt64? = nil
  fileprivate var _exp: Int64? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Beancount_Number: @unchecked Sendable {}
extension Beancount_Mpd: @unchecked Sendable {}
extension Beancount_MpdTriple: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "beancount"

extension Beancount_Number: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Number"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exact"),
    2: .same(proto: "mpd"),
    3: .same(proto: "triple"),
  ]

  public var isInitialized: Bool {
    if let v = self._mpd, !v.isInitialized {return false}
    if let v = self._triple, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._exact) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._mpd) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._triple) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._exact {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._mpd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._triple {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Beancount_Number, rhs: Beancount_Number) -> Bool {
    if lhs._exact != rhs._exact {return false}
    if lhs._mpd != rhs._mpd {return false}
    if lhs._triple != rhs._triple {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Beancount_Mpd: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Mpd"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
    2: .same(proto: "exp"),
    3: .same(proto: "digits"),
    4: .same(proto: "len"),
    5: .same(proto: "data"),
  ]

  public var isInitialized: Bool {
    if self._flags == nil {return false}
    if self._exp == nil {return false}
    if self._digits == nil {return false}
    if self._len == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._flags) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._exp) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._digits) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._len) }()
      case 5: try { try decoder.decodeRepeatedUInt32Field(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._flags {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._exp {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._digits {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._len {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    if !self.data.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.data, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Beancount_Mpd, rhs: Beancount_Mpd) -> Bool {
    if lhs._flags != rhs._flags {return false}
    if lhs._exp != rhs._exp {return false}
    if lhs._digits != rhs._digits {return false}
    if lhs._len != rhs._len {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Beancount_MpdTriple: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MpdTriple"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tag"),
    2: .same(proto: "sign"),
    3: .same(proto: "hi"),
    4: .same(proto: "lo"),
    5: .same(proto: "exp"),
  ]

  public var isInitialized: Bool {
    if self._tag == nil {return false}
    if self._sign == nil {return false}
    if self._hi == nil {return false}
    if self._lo == nil {return false}
    if self._exp == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._tag) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._sign) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._hi) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self._lo) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self._exp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tag {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._sign {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._hi {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._lo {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._exp {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Beancount_MpdTriple, rhs: Beancount_MpdTriple) -> Bool {
    if lhs._tag != rhs._tag {return false}
    if lhs._sign != rhs._sign {return false}
    if lhs._hi != rhs._hi {return false}
    if lhs._lo != rhs._lo {return false}
    if lhs._exp != rhs._exp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
